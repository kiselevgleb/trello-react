{"version":3,"sources":["actions/actionTypes.js","actions/actionCreators.js","components/Timer.jsx","components/Task.jsx","components/Desk.jsx","components/Header.jsx","Main.js","App.js","serviceWorker.js","reducers/skills.js","api/index.js","sagas/index.js","store/index.js","index.js"],"names":["GET_TICKETS_REQUEST","GET_TICKETS_FAILURE","GET_TICKETS_SUCCESS","POST_TICKET_REQUEST","POST_TICKET_FAILURE","POST_TICKET_SUCCESS","postTicketRequest","data","type","payload","Timer","prop","seconds","setSeconds","useEffect","timer","setInterval","clearInterval","hours","Math","floor","divisor_for_minutes","minutes","divisor_for_seconds","sec","ceil","className","Task","dispatch","useDispatch","useState","parseInt","content","time","colClass","divClass","buttonClass","status","cost","buttonType","round","costPerHour","text","onClick","JSON","stringify","id","Desk","booleanAddTask","setBooleanAddTask","coin","map","o","button","onSubmit","evt","preventDefault","undefined","target","value","placeholder","rows","Header","Main","props","useSelector","state","skills","loading","error","ticketsTodo","ticketsInPr","ticketsDone","length","App","path","component","Boolean","window","location","hostname","match","initialState","tickets","ticket","postTicket","a","fetch","process","method","headers","body","response","ok","Error","statusText","json","listTickets","handleGetTicketsSaga","watchGetTicketsSaga","watchPostTicketSaga","handlePostTicketSaga","saga","action","retry","put","message","takeEvery","filterPostTicketAction","debounce","errorTicket","spawn","reducer","combineReducers","filter","tic","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7622b355.chunk.js","sourcesContent":["export const GET_TICKETS_REQUEST = 'GET_TICKETS_REQUEST';\nexport const GET_TICKETS_FAILURE = 'GET_TICKETS_FAILURE';\nexport const GET_TICKETS_SUCCESS = 'GET_TICKETS_SUCCESS';\nexport const POST_TICKET_REQUEST = 'POST_TICKET_REQUEST';\nexport const POST_TICKET_FAILURE = 'POST_TICKET_FAILURE';\nexport const POST_TICKET_SUCCESS = 'POST_TICKET_SUCCESS'; ","import {\n  GET_TICKETS_REQUEST,\n  GET_TICKETS_FAILURE,\n  GET_TICKETS_SUCCESS,\n  POST_TICKET_REQUEST,\n  POST_TICKET_FAILURE,\n  POST_TICKET_SUCCESS,\n\n} from './actionTypes';\n\nexport const postTicketRequest = data => ({\n  type: POST_TICKET_REQUEST,\n  payload: { data },\n});\n\nexport const postTicketFailure = errorTicket => ({\n  type: POST_TICKET_FAILURE,\n  payload: { errorTicket },\n});\n\nexport const postTicketSuccess = ticket => ({\n  type: POST_TICKET_SUCCESS,\n  payload: { ticket },\n});\n\nexport const getTicketsRequest = () => ({\n  type: GET_TICKETS_REQUEST,\n});\n\nexport const getTicketsFailure = error => ({\n  type: GET_TICKETS_FAILURE,\n  payload: { error },\n});\n\nexport const getTicketsSuccess = tickets => ({\n  type: GET_TICKETS_SUCCESS,\n  payload: { tickets },\n});","import React, { useEffect } from 'react';\n\nexport default function Timer(prop) {\n    let seconds = prop.seconds;\n    let setSeconds = prop.setSeconds;\n\n    useEffect(() => {\n        const timer = setInterval(() => {\n            setSeconds(seconds + 1);\n        }, 1000);\n        return () => clearInterval(timer);\n    }, [seconds, setSeconds]);\n    let hours = Math.floor(seconds / (60 * 60));\n    let divisor_for_minutes = seconds % (60 * 60);\n    let minutes = Math.floor(divisor_for_minutes / 60);\n    let divisor_for_seconds = divisor_for_minutes % 60;\n    let sec = Math.ceil(divisor_for_seconds);\n\n    return (\n        <div>\n            <p className=\"text-price p text-time\">{hours < 10 ? `0${hours}` : hours}:{minutes < 10 ? `0${minutes}` : minutes}:{sec < 10 ? `0${sec}` : sec}</p>\n        </div>\n    );\n}","import React, { Fragment, useState } from 'react';\nimport { postTicketRequest } from '../actions/actionCreators';\nimport { useDispatch } from 'react-redux';\nimport Timer from './Timer';\n\nexport default function Task(prop) {\n    const dispatch = useDispatch();\n    const [seconds, setSeconds] = useState(parseInt(prop.content.time));\n    const costPerHour = 1000;\n\n    let colClass = \"col-12\";\n    let divClass = false;\n    let buttonClass = false;\n    let status = \"Done\";\n    let timer = \"false\";\n    let cost = \"false\";\n    let costInSec = costPerHour / 3600;\n\n    if (prop.buttonType === \"Start\") {\n        colClass = \"col-9\";\n        divClass = \"col-3 align-self-center butStart\";\n        buttonClass = \"btn btn-primary butStartText\";\n        status = 'In progress';\n        timer = 0;\n    } else if (prop.buttonType === \"Resolve\") {\n        colClass = \"col-8\";\n        divClass = \"col-4 align-self-center butResolve\";\n        buttonClass = \"btn btn-primary butResolveText butStartText\";\n        status = 'Done';\n        cost = Math.round(costInSec * seconds * 100) / 10;\n    }\n    const butClick = () => {\n        let data = JSON.stringify({ \"id\": prop.content.id, \"text\": prop.content.text, \"status\": status, \"time\": timer, \"cost\": cost })\n        dispatch(postTicketRequest(data));\n    };\n    return (\n        <Fragment>\n            <div className=\"row dataText\">\n                <div className={colClass}>\n                    <p className=\"text-body\">&#128479; {prop.content.text}</p>\n                    {prop.content.time !== \"false\" ?\n                        <Timer seconds={seconds} setSeconds={setSeconds}></Timer>\n                        :\n                        <></>}\n                    {prop.content.cost !== \"false\" ?\n                        <p className=\"text-price p text-cost\">&#8381;{prop.content.cost}</p> : <></>}\n                </div>\n                {prop.buttonType ?\n                    <div className={divClass}>\n                        <button type=\"button\" className={buttonClass} onClick={butClick}>{prop.buttonType}</button>\n                    </div> : <></>}\n            </div>\n        </Fragment>\n    )\n}","import React, { useState } from 'react';\nimport Task from './Task';\nimport { useDispatch } from 'react-redux';\nimport { postTicketRequest } from '../actions/actionCreators';\n\nexport default function Desk(prop) {\n    const [booleanAddTask, setBooleanAddTask] = useState(true);\n    const dispatch = useDispatch();\n\n    const addTask = evt => {\n        evt.preventDefault();\n        if (evt.target[0].value !== undefined) {\n            let data = JSON.stringify({ \"text\": evt.target[0].value, \"status\": \"To do\", \"time\": \"false\", \"cost\": \"false\" })\n            dispatch(postTicketRequest(data));\n            setBooleanAddTask(true);\n        }\n    };\n\n    return (\n        <div className=\"col-sm table\">\n            <div className=\"row text\"><p className=\"circle rounded-circle \">{prop.coin}</p>{prop.text}</div>\n            {prop.content.map(o =>\n                <Task content={o} buttonType={prop.button} key={o.id} />)}\n            {prop.button === \"Start\" ? booleanAddTask === true ?\n                <div className=\"row d-flex justify-content-center\">\n                    <button type=\"button\" className=\"btn butPlus btn-light\" onClick={() => setBooleanAddTask(false)}>&#10010; New task</button>\n                </div> :\n                <form onSubmit={addTask}>\n                    <div className=\"form-group\">\n                        <div className=\"row dataText\">\n                            <textarea placeholder=\"Enter the text...\" className=\"form-control\" rows=\"3\"></textarea >\n                        </div>\n                        <button type=\"submit\" className=\"btn butPlus butAdd btn-light\">Add Task</button>\n                    </div>\n                </form>\n                : <></>}\n        </div>\n    )\n}\n","import React, { Fragment } from 'react';\n\nexport default function Header() {\n\n    return (\n        <Fragment>\n            <h1 className=\"h1\">Anyway Labs Test Project</h1>\n            <p className=\"p\">Just some good deeds</p>\n        </Fragment>\n    )\n}\n","import { useSelector } from 'react-redux';\nimport Desk from './components/Desk';\nimport Header from './components/Header';\nimport Loader from 'react-loader';\n\nexport default function Main(props) {\n  const { loading, error, ticketsTodo, ticketsInPr, ticketsDone } = useSelector(state => state.skills);\n\n  if (loading) {\n    return <Loader></Loader>;\n  }\n  if (error) {\n    return <p className=\"error\">Произошла ошибка!</p>;\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"row rowMar\">\n        <Desk coin={ticketsTodo.length} text=\"To do\" button=\"Start\" content={ticketsTodo} />\n        <Desk coin={ticketsInPr.length} text=\"In progress\" button=\"Resolve\" content={ticketsInPr} />\n        <Desk coin={ticketsDone.length} text=\"Done\" content={ticketsDone} />\n      </div>\n    </div>\n  )\n}","\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Main from './Main';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { getTicketsRequest } from './actions/actionCreators';\nimport { useDispatch } from 'react-redux';\nimport React, { useEffect } from 'react';\n\nfunction App(props) {\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getTicketsRequest());\n  }, [dispatch])\n  return (\n    <Router>\n      <Switch>\n        <Route path='/' component={Main} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  GET_TICKETS_REQUEST,\n  GET_TICKETS_FAILURE,\n  GET_TICKETS_SUCCESS,\n  POST_TICKET_REQUEST,\n  POST_TICKET_FAILURE,\n  POST_TICKET_SUCCESS,\n} from '../actions/actionTypes'\n\nconst initialState = {\n  tickets: [],\n  loading: false,\n  error: null,\n  ticket: {},\n  ticketsTodo: [],\n  ticketsInPr: [],\n  ticketsDone: [],\n};\n\nexport default function skillsReducer(state = initialState, action) {\n  switch (action.type) {\n\n    case POST_TICKET_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case POST_TICKET_FAILURE:\n      const { errorTicket } = action.payload;\n      return {\n        ...state,\n        loading: false,\n        error: errorTicket,\n      };\n    case POST_TICKET_SUCCESS:\n      const { ticket } = action.payload;\n      return {\n        ...state,\n        tickets: ticket,\n        ticketsTodo: ticket.filter((tic) => tic.status === 'To do'),\n        ticketsInPr: ticket.filter((tic) => tic.status === 'In progress'),\n        ticketsDone: ticket.filter((tic) => tic.status === 'Done'),\n        loading: false,\n        error: null,\n      };\n\n    case GET_TICKETS_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case GET_TICKETS_FAILURE:\n      const { error } = action.payload;\n      return {\n        ...state,\n        loading: false,\n        error,\n      };\n    case GET_TICKETS_SUCCESS:\n      const { tickets } = action.payload;\n      return {\n        ...state,\n        tickets,\n        ticketsTodo: tickets.filter((tic) => tic.status === 'To do'),\n        ticketsInPr: tickets.filter((tic) => tic.status === 'In progress'),\n        ticketsDone: tickets.filter((tic) => tic.status === 'Done'),\n        loading: false,\n        error: null,\n      };\n    default:\n      return state;\n  }\n}","export const postTicket = async (data) => {\n    const response = await fetch(`${process.env.REACT_APP_POSTTASK_URL}`,\n        {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json;charset=utf-8' },\n            body: data\n        }\n    );\n    if (!response.ok) {\n        throw new Error(response.statusText);\n    } else {\n        return await response.json();\n    }\n}\n\nexport const listTickets = async () => {\n    const response = await fetch(`${process.env.REACT_APP_ALL_URL}`);\n    if (!response.ok) {\n        throw new Error(response.statusText);\n    }\n    return await response.json();\n}","import { takeEvery, put, spawn, debounce, retry } from 'redux-saga/effects';\nimport { postTicketSuccess, postTicketFailure, getTicketsSuccess, getTicketsFailure } from '../actions/actionCreators';\nimport { POST_TICKET_REQUEST, GET_TICKETS_REQUEST } from '../actions/actionTypes';\nimport { postTicket, listTickets, } from '../api/index';\n\nfunction* handleGetTicketsSaga(action) {\n    try {\n        const retryCount = 3;\n        const retryDelay = 1 * 1000; // ms\n        const data = yield retry(retryCount, retryDelay, listTickets);\n        yield put(getTicketsSuccess(data));\n    } catch (e) {\n        yield put(getTicketsFailure(e.message));\n    }\n}\n\n// watcher\nfunction* watchGetTicketsSaga() {\n    yield takeEvery(GET_TICKETS_REQUEST, handleGetTicketsSaga);\n}\n\nfunction filterPostTicketAction({ type, payload }) {\n    return type === POST_TICKET_REQUEST && payload.data !== ''\n}\n\n// watcher\nfunction* watchPostTicketSaga() {\n    yield debounce(100, filterPostTicketAction, handlePostTicketSaga);\n}\n\n// worker\nfunction* handlePostTicketSaga(action) {\n    try {\n        const retryCount = 3;\n        const retryDelay = 1 * 1000; // ms\n        const data = yield retry(retryCount, retryDelay, postTicket, action.payload.data);\n        yield put(postTicketSuccess(data));\n    } catch (e) {\n        yield put(postTicketFailure(e.message));\n    }\n}\n\nexport default function* saga() {\n    yield spawn(watchPostTicketSaga);\n    yield spawn(watchGetTicketsSaga);\n}","import { createStore, combineReducers, applyMiddleware, compose, } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport skillsReducer from '../reducers/skills';\nimport saga from '../sagas';\n\nconst reducer = combineReducers({\n  skills: skillsReducer,\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(reducer, composeEnhancers(\n  applyMiddleware(sagaMiddleware)\n));\n\nsagaMiddleware.run(saga);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n<Provider store={store}>\n    <App />\n</Provider>, \ndocument.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}